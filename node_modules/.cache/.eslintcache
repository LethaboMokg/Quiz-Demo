[{"/home/gugu/Momentum/Quiz-Demo/src/index.js":"1","/home/gugu/Momentum/Quiz-Demo/src/App.js":"2","/home/gugu/Momentum/Quiz-Demo/src/reportWebVitals.js":"3","/home/gugu/Momentum/Quiz-Demo/src/Pages/Home.js":"4","/home/gugu/Momentum/Quiz-Demo/src/Pages/Quiz.js":"5","/home/gugu/Momentum/Quiz-Demo/src/Pages/loginform.js":"6","/home/gugu/Momentum/Quiz-Demo/src/Pages/firebase.js":"7"},{"size":535,"mtime":1668623009412,"results":"8","hashOfConfig":"9"},{"size":615,"mtime":1668760134880,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1668623009412,"results":"11","hashOfConfig":"9"},{"size":1190,"mtime":1668757746336,"results":"12","hashOfConfig":"9"},{"size":5320,"mtime":1668786030621,"results":"13","hashOfConfig":"9"},{"size":6376,"mtime":1668776332743,"results":"14","hashOfConfig":"9"},{"size":862,"mtime":1668678115882,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1ue937f",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"19"},"/home/gugu/Momentum/Quiz-Demo/src/index.js",[],[],[],"/home/gugu/Momentum/Quiz-Demo/src/App.js",[],[],"/home/gugu/Momentum/Quiz-Demo/src/reportWebVitals.js",[],[],"/home/gugu/Momentum/Quiz-Demo/src/Pages/Home.js",["41"],[],"import './App.css';\nimport React from 'react'\nimport { Navigate } from \"react-router-dom\";\n\nfunction Home (){\n  const [goToQuiz, setGoToQuiz] = React.useState(false);\n\n  if (goToQuiz){\n    return <Navigate to=\"/quiz\"/>;\n  }\n  \n  return(\n    <div className=\"App\">\n    \n        <img src={require('./images/2.png')}  />\n    \n      <p><b>Financial success</b> is within your control </p>\n      <p>Our financial advisers provide you with sound financial advice you can trust to help you on your personal journey and to make informed decisions about your money - so you can achieve your dreams and goals. Whether you’re moving up the corporate ladder or planning your retirement, Momentum’s certified financial planners can help you get there.</p>\n      \n      <div className='content'>\n        <h1><i>Instructions:</i></h1>\n        <p>1. Select only one of the available options.</p>\n        <p>2. This quiz is based on the financial succcess.</p>\n        <p>3. Answer all questions.</p>\n\n      </div>\n\n      <button className='start' id='submit' onClick={() => {setGoToQuiz(true);}} type='button'>Start financial quiz</button>\n      <br/>\n      <br/>\n    </div>\n  );\n}\n\nexport default Home;","/home/gugu/Momentum/Quiz-Demo/src/Pages/Quiz.js",["42","43","44","45","46","47"],[],"/home/gugu/Momentum/Quiz-Demo/src/Pages/loginform.js",["48","49"],[],"import React, { useState } from 'react'\nimport { getAuth } from \"firebase/auth\";\nimport { RecaptchaVerifier } from \"firebase/auth\";\nimport { signInWithPhoneNumber } from \"firebase/auth\";\nimport { Navigate} from \"react-router-dom\";\nimport firebase from './firebase'\n\nfunction GoToNext() {\n\n    const [goToHome, setGoToHome] = React.useState(false);\n    let formInfo = {}\n\n\n\n    if(goToHome) {\n        return <Navigate to=\"/Home\" />;\n    }\n\n    function handleChange(e) {\n        const { name, value } = e.target\n\n        formInfo[name] = value;\n\n        // this.setState(\n        //     {\n        //         [name]: value\n        //     }\n        // )\n    }\n    function configureCaptcha() {\n        window.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\n            'size': 'invisible',\n            'callback': (response) => {\n                // reCAPTCHA solved, allow signInWithPhoneNumber.\n                //this.onSignInSubmit();\n                console.log('Recaptcha varified')\n            },\n            defaultCountry: \"IN\"\n        }, getAuth());\n    }\n    function onSignInSubmit (e) {\n\n        e.preventDefault()\n\n        \n        configureCaptcha()\n        // const phoneNumber = \"+27\" + this.state.mobile\n        const phoneNumber = \"+27\" + formInfo['mobile']\n\n        console.log(phoneNumber)\n        const appVerifier = window.recaptchaVerifier;\n        const auth = getAuth();\n        signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n            .then((confirmationResult) => {\n                // SMS sent. Prompt user to type the code from the message, then sign the\n                // user in with confirmationResult.confirm(code).\n                window.confirmationResult = confirmationResult;\n                console.log('OTP has been sent.')\n                // ...\n            }).catch((error) => {\n                // Error; SMS not sent\n                // ...\n                console.log('SMS not sent')\n                console.log(error)\n            });\n    }\n    function onSubmitOTP (e){\n        (e).preventDefault()\n\n        console.log(formInfo['otp'])\n\n        setGoToHome(true);\n\n        // const code = this.state.otp\n        const code = formInfo['otp']\n        console.log(code)\n        window.confirmationResult.confirm(code).then((result) => {\n            // User signed in successfully.\n            const user = result.user;\n            console.log(JSON.stringify(user))\n            alert('User is verified')\n            setGoToHome(true);\n            // ...\n        }).catch((error) => {\n            // User couldn't sign in (bad verification code?)\n            // ...\n        });\n    }\n     \n    return (\n            <div>\n                <h2>LOGIN</h2>\n                <form onSubmit={onSignInSubmit}>\n                    <div id='sign-in-button'></div>\n\n                    <input type='number' name='mobile' placeholder='Mobile number' required onChange={handleChange} />\n                    <button type='submit'>Submit</button>\n                </form>\n\n\n                <h2>Enter OTP</h2>\n                <form onSubmit={onSubmitOTP}>\n\n                    <input type='number' name='otp' placeholder='OTP Number' required onChange={handleChange} />\n                    <button type='submit' >Submit</button>\n                </form>\n            </div>\n        );\n    \n\n}\n\n// class App extends React.Component {\n//     auth = getAuth();\n\n//     handleChange = (e) => {\n//         const { name, value } = e.target\n//         this.setState(\n//             {\n//                 [name]: value\n//             }\n//         )\n//     }\n//     configureCaptcha = () => {\n//         window.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\n//             'size': 'invisible',\n//             'callback': (response) => {\n//                 // reCAPTCHA solved, allow signInWithPhoneNumber.\n//                 //this.onSignInSubmit();\n//                 console.log('Recaptcha varified')\n//             },\n//             defaultCountry: \"IN\"\n//         }, getAuth());\n//     }\n//     onSignInSubmit = (e) => {\n\n//         e.preventDefault()\n\n//         this.configureCaptcha()\n//         const phoneNumber = \"+27\" + this.state.mobile\n//         console.log(phoneNumber)\n//         const appVerifier = window.recaptchaVerifier;\n//         const auth = getAuth();\n//         signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n//             .then((confirmationResult) => {\n//                 // SMS sent. Prompt user to type the code from the message, then sign the\n//                 // user in with confirmationResult.confirm(code).\n//                 window.confirmationResult = confirmationResult;\n//                 console.log('OTP has been sent.')\n//                 // ...\n//             }).catch((error) => {\n//                 // Error; SMS not sent\n//                 // ...\n//                 console.log('SMS not sent')\n//                 console.log(error)\n//             });\n//     }\n//     onSubmitOTP = (e) => {\n//         (e).preventDefault()\n        \n//         GoToNext()\n\n//         return <Navigate to=\"/Home\"/>;\n\n//         const code = this.state.otp\n//         console.log(code)\n//         window.confirmationResult.confirm(code).then((result) => {\n//             // User signed in successfully.\n//             const user = result.user;\n//             console.log(JSON.stringify(user))\n//             alert('User is verified')\n//             // ...\n//         }).catch((error) => {\n//             // User couldn't sign in (bad verification code?)\n//             // ...\n//         });\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <h2>LOGIN</h2>\n//                 <form onSubmit={this.onSignInSubmit}>\n//                     <div id='sign-in-button'></div>\n\n//                     <input type='number' name='mobile' placeholder='Mobile number' required onChange={this.handleChange} />\n//                     <button type='submit'>Submit</button>\n//                 </form>\n\n\n//                 <h2>Enter OTP</h2>\n//                 <form onSubmit={this.onSubmitOTP}>\n\n//                     <input type='number' name='otp' placeholder='OTP Number' required onChange={this.handleChange} />\n//                     <button type='submit' >Submit</button>\n//                 </form>\n//             </div>\n//         )\n//     }\n// }\n\nexport default GoToNext","/home/gugu/Momentum/Quiz-Demo/src/Pages/firebase.js",["50"],[],"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCP8QpyoTjhz28c1oyiOlaTH1Fjabkj4Mc\",\n  authDomain: \"momentum-science-of-success.firebaseapp.com\",\n  projectId: \"momentum-science-of-success\",\n  storageBucket: \"momentum-science-of-success.appspot.com\",\n  messagingSenderId: \"143097598981\",\n  appId: \"1:143097598981:web:bdc539ff0f3db24818b86c\",\n  measurementId: \"G-702238C2CG\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);",{"ruleId":"51","severity":1,"message":"52","line":15,"column":9,"nodeType":"53","endLine":15,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":21},{"ruleId":"54","severity":1,"message":"58","line":5,"column":45,"nodeType":"56","messageId":"57","endLine":5,"endColumn":57},{"ruleId":"54","severity":1,"message":"59","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":18},{"ruleId":"54","severity":1,"message":"60","line":63,"column":9,"nodeType":"56","messageId":"57","endLine":63,"endColumn":14},{"ruleId":"61","severity":1,"message":"62","line":84,"column":5,"nodeType":"63","endLine":84,"endColumn":7,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":179,"column":7,"nodeType":"56","messageId":"67","endLine":179,"endColumn":12},{"ruleId":"54","severity":1,"message":"68","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"69","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":16},{"ruleId":"54","severity":1,"message":"70","line":21,"column":7,"nodeType":"56","messageId":"57","endLine":21,"endColumn":16},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'DataSnapshot' is defined but never used.","'usePromise' is defined but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dbRef'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-const-assign","'score' is constant.","const","'useState' is defined but never used.","'firebase' is defined but never used.","'analytics' is assigned a value but never used.",{"desc":"72","fix":"73"},"Update the dependencies array to be: [dbRef]",{"range":"74","text":"75"},[1527,1529],"[dbRef]"]